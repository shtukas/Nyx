#!/usr/bin/ruby

# encoding: UTF-8

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

=begin
DisplayItemsNS16 {
    "uuid"        : String # used by DoNotShowUntil
    "announce"    : String
    "commands"    : nil or String
    "lambda"      : Lambda
}
=end

loop {

    system("clear")

    vspaceleft = CatalystUtils::screenHeight()-8

    puts ""

    items = UIServices::waveLikeNS16s()
                .select{|item| DoNotShowUntil::isVisible(item["uuid"]) }
    items.each_with_index{|item, indx|
        announce = "#{"%3d" % indx} #{item["announce"]}"
        puts announce
        vspaceleft = vspaceleft - CatalystUtils::verticalSize(announce)
        break if vspaceleft < 0
    }

    context = {"items" => items}
    actions = [
        ["..", ".. (access top item)", lambda{|context, command|
            context["items"][0]["lambda"].call()
        }],
        ["++", "++ # Postpone top item by an hour", lambda{|context, command|
            DoNotShowUntil::setUnixtime(context["items"][0]["uuid"], Time.new.to_i+3600)
        }],
        ["+ *", "+ <weekdayname> # Postpone top item", lambda{|context, command|
            _, weekdayname = Interpreting::tokenizer(command)
            unixtime = CatalystUtils::codeToUnixtimeOrNull("+#{weekdayname}")
            return if unixtime.nil?
            item = context["items"][0]
            DoNotShowUntil::setUnixtime(item["uuid"], unixtime)
        }],
        ["+ * *", "+ <float> <datecode unit> # Postpone top item", lambda{|context, command|
            _, amount, unit = Interpreting::tokenizer(command)
            unixtime = CatalystUtils::codeToUnixtimeOrNull("+#{amount}#{unit}")
            return if unixtime.nil?
            item = context["items"][0]
            DoNotShowUntil::setUnixtime(item["uuid"], unixtime)
        }],
        ["select *", "select <n>", lambda{|context, command|
            _, ordinal = Interpreting::tokenizer(command)
            ordinal = ordinal.to_i
            item = context["items"][ordinal]
            return if item.nil?
            item["lambda"].call()
        }]
    ]

    returnvalue = Interpreting::interpreter(context, actions, {
        "displayHelpInLineAtIntialization" => true
    })
}
