#!/usr/bin/ruby

# encoding: UTF-8

require_relative "Libs/loader.rb"

VIENNA_PATH_TO_DATA = "/Users/pascal/Library/Application Support/Vienna/messages.db"

# select link from messages where read_flag=0;
# update messages set read_flag=1 where link="https://www.schneier.com/blog/archives/2018/04/security_vulner_14.html"

class ViennaLinkFeeder
    def initialize()
        @links = []
    end
    def next()
        if @links.empty? then
            query = "select link from messages where read_flag=0;"
            @links = `sqlite3 '#{VIENNA_PATH_TO_DATA}' '#{query}'`.lines.map{|line| line.strip }
        end
        @links[0]
    end
    def links()
        @links
    end
    def done(link)
        query = "update messages set read_flag=1 where link=\"#{link}\""
        system("sqlite3 '#{VIENNA_PATH_TO_DATA}' '#{query}'")
        @links.shift
    end
    def count()
       query = "select link from messages where read_flag=0;"
       `sqlite3 '#{VIENNA_PATH_TO_DATA}' '#{query}'`.lines.count
    end
end

def timeStringL22()
    "#{Time.new.strftime("%Y%m%d-%H%M%S-%6N")}"
end

viennaLinkFeeder = ViennaLinkFeeder.new()

loop {
    link = viennaLinkFeeder.next()
    break if link.nil?
    puts "vienna: #{link}"

    nereiduuid = SecureRandom.hex
    NereidInterface::insertElementComponents(nereiduuid, Time.new.to_i, link, "Url", link)

    quark = {
        "uuid"       => SecureRandom.hex,
        "nyxNxSet"   => "d65674c7-c8c4-4ed4-9de9-7c600b43eaab",
        "unixtime"   => Time.new.to_i,
        "nereiduuid" => nereiduuid
    }
    TodoCoreData::put(quark)

    ordinal = Quarks::computeLowOrdinal()

    QuarksOrdinals::setQuarkOrdinal(quark, ordinal)

    viennaLinkFeeder.done(link)
}
