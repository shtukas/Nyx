#!/usr/bin/ruby

# encoding: UTF-8

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

def diveNavigationPoints()
    loop {
        system("clear")
        typex = NavigationPoints::interactivelySelectNavigationPointTypeXOrNull()
        break if typex.nil?
        loop {
            system("clear")
            classifiers = NavigationPoints::getNavigationPoints()
                            .select{|classifier| classifier["type"] == typex["type"] }
                            .sort{|c1, c2| c1["unixtime"] <=> c2["unixtime"] }
            classifier = Utils::selectOneObjectOrNullUsingInteractiveInterface(classifiers, lambda{|classifier| NavigationPoints::toString(classifier) })
            break if classifier.nil?
            NavigationPoints::landing(classifier)
        }
    }
end

loop {
    system("clear")
    puts "Nyx ðŸ—º"

    ops = [
        "Search",
        "Network Listing",
        "Dive Navigation Points",
        "Make new Element (with ancestors paths)",
        "Architect Navigation Point (with ancestors paths)"
    ]
    operation = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", ops)
    break if operation.nil?
    if operation == "Search" then
        Patricia::generalSearchLoop()
    end
    if operation == "Network Listing" then
        loop {
            nodes = Patricia::networkNodesInOrder()
            node = LucilleCore::selectEntityFromListOfEntitiesOrNull("node", nodes, lambda{|node| Patricia::toString(node) })
            break if node.nil?
            Patricia::landing(node)
        }
    end
    if operation == "Dive Navigation Points" then
        diveNavigationPoints()
    end
    if operation == "Make new Element (with ancestors paths)" then
        node = NereidInterface::interactivelyIssueNewElementOrNull()
        next if node.nil?
        Network::architectAncestorsPathsToNode(node)
        Patricia::landing(node)
    end
    if operation == "Architect Navigation Point (with ancestors paths)" then
        node = NavigationPoints::architectureNavigationPointOrNull()
        next if node.nil?
        Network::architectAncestorsPathsToNode(node)
        Patricia::landing(node)
    end
}
