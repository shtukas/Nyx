#!/usr/bin/ruby

# encoding: UTF-8

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

if ARGV[0] == "search" then
    Space::generalSearchLoop()
    exit
end

if ARGV[0] == "listing" then
    loop {
        nxpoint = LucilleCore::selectEntityFromListOfEntitiesOrNull("NxPoint", Space::getNxPoints(), lambda{|e| e.toString() })
        break if nxpoint.nil?
        Space::landing(nxpoint)
    }
    exit
end

if ARGV[0] == "make" then
    a = nxpoint = LucilleCore::selectEntityFromListOfEntitiesOrNull("NxType", ["NxPod", "NxNav"])
    exit if a.nil?
    if a == "NxPod" then
        nxpod = NxPods::interactivelyIssueNewNxPodOrNull()
        exit if nxpod.nil?
        Space::landing(nxpod)
    end
    if a == "NxNav" then
        nxnav = NxNavs::interactivelyIssueNewNxNavOrNull()
        exit if nxnav.nil?
        Space::landing(nxnav)
    end
    exit
end

if ARGV[0] == "stack" and ARGV[1] then
    id = ARGV[1]
    if !Space::idIsUsed(id) then
        puts "error: the provided id '#{id}' is not used"
        exit
    end
    puts "stacking '#{Space::idToNxPointOrNull(id).description()}'"
    IdStack::stack(id)
    exit
end

if ARGV[0] == "unstack" then
    IdStack::unStackOrNull()
    exit
end

if ARGV[0] == "unique-string" then
    puts SecureRandom.hex(6)
    exit
end

if ARGV[0] == "fsck" then
    NxPods::getNxPods().each{|nxpod|
        puts nxpod.id()
        NxPods::fsckNxPod(nxpod.id())
    }
    NxNavs::getNxNavs().each{|nxnav|
        puts nxnav.id()
        NxNavs::fsckNxNav(nxnav.id())
    }
    puts "All good!".green
    exit
end

str = <<HELP
usage:
    nyx search
    nyx listing
    nyx make-new-NxPod
    nyx make-new-NxNav
    nyx stack <NxId>
    nyx unstack 
    nyx unique-string # Generates a unique string for type FSUniqueString
    nyx fsck
    nyx help # help display
HELP
puts str

